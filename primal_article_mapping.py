# -*- coding: utf-8 -*-
"""primal_article_mapping.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-vS7wcCPQwoeAdhUH9dpIDEjVYggfXTh
"""

import pandas as pd
import numpy as np
import datetime
import re

from google.colab import auth
auth.authenticate_user()
print('Authenticated')

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project gcp-wow-ent-im-tbl-prod article_pos_summary
# 
# #standardSQL
# with dat as (
#     SELECT 
# distinct
#  
# a.article, c.ArticleDescription, b.Sub_CategoryDescription, a.retailuom, 
# PERCENTILE_CONT(a.retailquantity, 0.5) over(partition by a.article, c.ArticleDescription, b.Sub_CategoryDescription, a.retailuom) AS median_retailquantity,
# PERCENTILE_CONT(a.retailquantity, 0.1) over(partition by a.article, c.ArticleDescription, b.Sub_CategoryDescription, a.retailuom) AS quantile_10th_retailquantity,
# PERCENTILE_CONT(a.retailquantity, 0.9) over(partition by a.article, c.ArticleDescription, b.Sub_CategoryDescription, a.retailuom) AS quantile_90th_retailquantity,
# PERCENTILE_CONT(a.retailquantity, 0.01) over(partition by a.article, c.ArticleDescription, b.Sub_CategoryDescription, a.retailuom) AS quantile_1st_retailquantity,
# PERCENTILE_CONT(a.retailquantity, 0.99) over(partition by a.article, c.ArticleDescription, b.Sub_CategoryDescription, a.retailuom) AS quantile_99th_retailquantity,
# 
# -- PERCENTILE_CONT(a.retailamount, 0.5) over(partition by a.article, c.ArticleDescription, b.Sub_CategoryDescription, a.retailuom) AS median_retailamount,
# -- PERCENTILE_CONT(a.retailamount, 0.1) over(partition by a.article, c.ArticleDescription, b.Sub_CategoryDescription, a.retailuom) AS quantile_10th_retailamount,
# -- PERCENTILE_CONT(a.retailamount, 0.9) over(partition by a.article, c.ArticleDescription, b.Sub_CategoryDescription, a.retailuom) AS quantile_90th_retailamount,
# 
# PERCENTILE_CONT((case when a.retailquantity = 0 then null else a.retailamount/a.retailquantity end), 0.5) over(partition by a.article, c.ArticleDescription, b.Sub_CategoryDescription, a.retailuom) AS median_retailamount_per_retailquantity,
# PERCENTILE_CONT((case when a.retailquantity = 0 then null else a.retailamount/a.retailquantity end), 0.1) over(partition by a.article, c.ArticleDescription, b.Sub_CategoryDescription, a.retailuom) AS quantile_10th_retailamount_per_retailquantity,
# PERCENTILE_CONT((case when a.retailquantity = 0 then null else a.retailamount/a.retailquantity end), 0.9) over(partition by a.article, c.ArticleDescription, b.Sub_CategoryDescription, a.retailuom) AS quantile_90th_retailamount_per_retailquantity,
# PERCENTILE_CONT((case when a.retailquantity = 0 then null else a.retailamount/a.retailquantity end), 0.01) over(partition by a.article, c.ArticleDescription, b.Sub_CategoryDescription, a.retailuom) AS quantile_1st_retailamount_per_retailquantity,
# PERCENTILE_CONT((case when a.retailquantity = 0 then null else a.retailamount/a.retailquantity end), 0.99) over(partition by a.article, c.ArticleDescription, b.Sub_CategoryDescription, a.retailuom) AS quantile_99th_retailamount_per_retailquantity,
# 
# FROM
# `gcp-wow-ent-im-tbl-prod.adp_dm_basket_sales_view.pos_item_line_detail` a,
# `gcp-wow-ent-im-tbl-prod.adp_dm_masterdata_view.dim_article_hierarchy_v` b,
# `gcp-wow-ent-im-tbl-prod.adp_dm_masterdata_view.dim_article_v` c
# where
# (ltrim(c.Article,'0')=ltrim(b.Article,'0')) and
# a.salesorg = '1005'
# and ltrim(a.article,'0') = ltrim(b.article,'0')
# and b.salesorg = '1005'
# and b.DepartmentDescription like '%MEAT%'
# --and b.SegmentDescription = 'LAMB'
# and b. Department not in ('W100','W120')
# and businessdate >= date_sub(current_date(), interval 90*1 day) 
# and itemvoidflag is null
# and ItemTXNType in  ('S201') #,'S202') --S201 sales, S202 returns.
# order by a.article, a.retailuom
# ),
# split_ArticleDescription as (
# select split( REGEXP_REPLACE(lower(ArticleDescription), r'[\s]{2,}', ' '),' ') as split_ArticleDescription, *
# from dat
# )
# --select retailuom, Sub_CategoryDescription, article, ArticleDescription, flattened_split_ArticleDescription, quantile_90th_retailamount_per_retailquantity
# --from split_ArticleDescription, split_ArticleDescription.split_ArticleDescription as flattened_split_ArticleDescription
# --select retailuom, Sub_CategoryDescription, article, REGEXP_REPLACE(lower(ArticleDescription), r'[\s]{2,}', ' ') as ArticleDescription, quantile_90th_retailquantity, quantile_90th_retailamount_per_retailquantity
# select retailuom, Sub_CategoryDescription, article, REGEXP_REPLACE(lower(ArticleDescription), r'[\s]{2,}', ' ') as ArticleDescription, quantile_99th_retailquantity, quantile_99th_retailamount_per_retailquantity
# from dat
# where retailuom = 'KG'

#Get the 'primal mapping gsheet'
#=========================================================================================================================================================================================================================
!pip install gspread --upgrade # Uninstall gspread-3.0.1 with 3.7.0
!pip install gspread-dataframe --upgrade
import gspread
from oauth2client.client import GoogleCredentials as GC
GoogleSheets = gspread.authorize(GC.get_application_default())
import gspread_dataframe 

wb = GoogleSheets.open_by_url('https://docs.google.com/spreadsheets/d/16Oam02bvZOEedDDajJ255fNZaZLSj7b27ewQEQFuufY/edit#gid=1704440079')

def function_gsheet_data(wb=wb, wsName='Sheet1'):
  mWB = wb.worksheet(wsName)
  dat = mWB.get_all_values()
  df = pd.DataFrame(dat, columns=['Supplier',	'PRODUCTION_LINE',	'Type',	'PRIMAL_CODE',	'Primal',	'WOW_Code', 'Description',	'CRATE_WEIGHT',	'YIELD'])
  df = df.iloc[1:] # removes column header row from 1st data row
  return df

primal_mapping = function_gsheet_data()

primal_mapping.head()

# clean string
def string_clean(s):
  s = s.str.lower()
  s = [re.sub('\s{2,}', ' ', x) for x in s]
  s = [re.sub('[^a-zA-Z0-9 ]', ' ', x) for x in s]
  s = [x.strip() for x in s]
  return s

primal_mapping['Description'] = string_clean(primal_mapping['Description'])
primal_mapping['Primal'] = string_clean(primal_mapping['Primal'])
primal_mapping['Type'] = string_clean(primal_mapping['Type'])

primal_mapping.head()

article_pos_summary.head()

primal_mapping.reset_index(drop=True).to_csv('primal_mapping.csv')
article_pos_summary.reset_index(drop=True).to_csv('article_pos_summary.csv')

# Commented out IPython magic to ensure Python compatibility.
# activate R magic
#!pip install rpy2==3.2.2
!pip install rpy2
# %load_ext rpy2.ipython

# Commented out IPython magic to ensure Python compatibility.
# %%R #-i all_change_request_data
# 
# library(tidyverse)
# #if (!require("feather")) install.packages("feather")
# install.packages("feather")
# library(feather)
# 
# install.packages("stringdist")
# library(stringdist)
# 
# install.packages("reshape2")
# library(reshape2)
# 
# df <- read_csv("article_pos_summary.csv")
# arts <- df %>%
#   filter(retailuom=='KG') %>%
#   distinct(ArticleDescription) %>%
#   .[[1]]
# 
# arts
# 
# #### primal_mapping
# primalMap_df <- read_csv("primal_mapping.csv")
# 
# primals <- primalMap_df %>%
#   distinct(Description) %>%
#   .[[1]]
# 
# primals
# 
# 
# #x <- stringdistmatrix(arts,arts,method="qgram" ,q=2)
# x <- stringdistmatrix(primals,arts,method="cosine" ,q=2)
# rownames(x) <- primals
# colnames(x) <- arts
# x
# 
# saveRDS(x, "Primals_articles_stringdist.rds")
# write.csv(x, "Primals_articles_stringdist.csv")
# 
# long_x <- reshape2::melt(x) %>% data.frame() %>% rename("Description"="Var1", "Article_Description"="Var2", "string_distance"="value") #%>% filter(string_distance < 0.2) 
# saveRDS(long_x, "long_x.rds")
# write.csv(long_x, "long_Primals_articles_stringdist.csv", row.names = FALSE, quote = FALSE)
#

long_Primals_articles_stringdist = pd.read_csv("long_Primals_articles_stringdist.csv", dtype={'Primal':'string','Primal':'string','string_distance':'float64'})

long_Primals_articles_stringdist.head()

addit_long_Primals_articles_stringdist = long_Primals_articles_stringdist.merge(article_pos_summary,left_on='Article_Description',right_on='ArticleDescription')

print(addit_long_Primals_articles_stringdist.shape)
print(long_Primals_articles_stringdist.shape)

#primal_mapping.merge(long_Primals_articles_stringdist, left_on='Description', right_on='Description')
primal_mapping_summary = primal_mapping.merge(addit_long_Primals_articles_stringdist, left_on='Description', right_on='Description', how='left')

primal_mapping_summary.head()

primal_mapping_summary.tail()['Primal'].iloc[0]

print(primal_mapping.shape)
print(primal_mapping_summary.shape)

long_Primals_articles_stringdist.query("string_distance>0").sort_values('string_distance')

"""## Save to bq"""

bq_primal_mapping_summary = primal_mapping_summary[['Primal','WOW_Code','PRIMAL_CODE','Article_Description','Sub_CategoryDescription','retailuom','string_distance','quantile_99th_retailquantity','quantile_99th_retailamount_per_retailquantity']].drop_duplicates()

pd.io.gbq.to_gbq(bq_primal_mapping_summary, 'sandpit.primal_mapping_summary', 'gcp-wow-pvc-grnstck-prod', chunksize=100000, reauth=False, if_exists='replace')